# Generated by Django 4.1.4 on 2023-01-30 00:11

from django.db import migrations, models
import django.db.models.deletion


def copy_to_new_models(apps, schema_editor):
    Creator = apps.get_model('medialib', 'Creator')
    CreatorWebsite = apps.get_model('medialib', 'CreatorWebsite')

    def get_platform(url):
        if 'twitter.com' in url:
            return 'TW'
        elif 'youtube.com' in url:
            return 'YT'
        elif 'instagram.com' in url:
            return 'IG'
        elif 'blog.naver.com' in url:
            return 'NB'
        elif 'tistory.com' in url:
            return 'TI'
        return ''

    for creator in Creator.objects.all():
        CreatorWebsite.objects.create(
            platform=get_platform(creator.url),
            creator=creator,
            url=creator.url,
        )


class Migration(migrations.Migration):

    dependencies = [
        ('medialib', '0031_creatorwebsite_platform'),
    ]

    operations = [
        migrations.AlterField(
            model_name='creatorwebsite',
            name='platform',
            field=models.CharField(blank=True, choices=[('TW', 'Twitter'), ('YT', 'YouTube'), ('IG', 'Instagram'), ('NB', 'Naver Blog'), ('TI', 'Tistory')], max_length=2),
        ),
        migrations.RunPython(copy_to_new_models),
        migrations.RemoveField(
            model_name='creator',
            name='url',
        ),
        migrations.CreateModel(
            name='YouTubeVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('date', models.DateField()),
                ('date_exact', models.BooleanField(default=True)),
                ('public', models.BooleanField(default=True)),
                ('upload_time', models.DateTimeField(auto_now_add=True, verbose_name='uploaded time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='updated time')),
                ('youtube_id', models.CharField(max_length=20, unique=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medialib.creator')),
                ('license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medialib.license')),
                ('tags', models.ManyToManyField(blank=True, to='medialib.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('date', models.DateField()),
                ('date_exact', models.BooleanField(default=True)),
                ('public', models.BooleanField(default=True)),
                ('upload_time', models.DateTimeField(auto_now_add=True, verbose_name='uploaded time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='updated time')),
                ('type', models.CharField(choices=[('I', 'Image'), ('V', 'Video'), ('A', 'Audio')], max_length=1)),
                ('url', models.URLField(max_length=400, unique=True, verbose_name='URL')),
                ('verified', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medialib.creator')),
                ('license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medialib.license')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medialib.mediasource')),
                ('tags', models.ManyToManyField(blank=True, to='medialib.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
